{"version":3,"sources":["Components/Auth/AuthForm.module.css","Components/Auth/AuthForm.js","Pages/AuthPage.js"],"names":["module","exports","AuthForm","history","useHistory","emailInputRef","useRef","passwordInputRef","authCtx","useContext","AuthContext","useState","isLogin","setIsLogin","isLoading","setIsLoading","className","classes","auth","onSubmit","event","preventDefault","url","enteredEmail","current","value","enteredPassword","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","data","Error","expirationTimer","Date","getTime","expiresIn","login","idToken","toISOString","replace","catch","err","alert","message","control","htmlFor","type","id","required","ref","actions","toggle","onClick","prevState","AuthPage"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,KAAO,uBAAuB,QAAU,0BAA0B,QAAU,0BAA0B,OAAS,yB,qGCmGlHC,EA/FE,WACf,IAAMC,EAAQC,cACRC,EAAgBC,mBAChBC,EAAmBD,mBACnBE,EAAQC,qBAAWC,KACzB,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA+BF,oBAAS,GAAxC,mBAAOG,EAAP,KAAiBC,EAAjB,KAwDA,OACE,0BAASC,UAAWC,IAAQC,KAA5B,UACE,6BAAKN,EAAU,QAAU,YACzB,uBAAMO,SArDY,SAACC,GACrBA,EAAMC,iBACN,IAIIC,EAJEC,EAAelB,EAAcmB,QAAQC,MACrCC,EAAkBnB,EAAiBiB,QAAQC,MAEjDV,GAAa,GAGXO,EADEV,EACE,oHAEA,wGAELe,MACGL,EACF,CACEM,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,MAAOT,EACPU,SAAUP,EACVQ,mBAAmB,IAErBC,QAAS,CAAE,eAAgB,sBAG9BC,MAAK,SAACC,GAEL,OADAtB,GAAa,GACVsB,EAAIC,GACCD,EAAIE,OAEHF,EAAIE,OAAOH,MAAK,SAACI,GAMtB,MAAM,IAAIC,MALG,yBAMd,GAEJ,IAAEL,MAAK,SAACI,GAGP,IAAME,EAAgB,IAAIC,MAAK,IAAIA,MAAOC,UAA2B,KAAfJ,EAAKK,WAC5DrC,EAAQsC,MAAMN,EAAKO,QAAQL,EAAgBM,eAC3C7C,EAAQ8C,QAAQ,IAChB,IAAEC,OAAM,SAACC,GACRC,MAAMD,EAAIE,QACX,GAEF,EAKG,UACE,sBAAKrC,UAAWC,IAAQqC,QAAxB,UACE,uBAAOC,QAAQ,QAAf,wBACA,uBAAOC,KAAK,QAAQC,GAAG,QAAQC,UAAQ,EAACC,IAAKtD,OAE/C,sBAAKW,UAAWC,IAAQqC,QAAxB,UACE,uBAAOC,QAAQ,WAAf,2BACA,uBACEC,KAAK,WACLC,GAAG,WACHC,UAAQ,EACRC,IAAKpD,OAGT,sBAAKS,UAAWC,IAAQ2C,QAAxB,WACI9C,GAAa,iCAASF,EAAU,QAAU,mBAC5CE,GAAa,mDACb,wBACE0C,KAAK,SACLxC,UAAWC,IAAQ4C,OACnBC,QA5EoB,WAC5BjD,GAAW,SAACkD,GAAD,OAAgBA,CAAhB,GACZ,EAuEO,SAKGnD,EAAU,qBAAuB,wCAM7C,EC7FcoD,UAJE,WACf,OAAO,cAAC,EAAD,GACR,C","file":"static/js/7.6d8b7145.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__11REu\",\"control\":\"AuthForm_control__3MC6d\",\"actions\":\"AuthForm_actions__2WQve\",\"toggle\":\"AuthForm_toggle__3nSos\"};","import { useState, useRef,useContext} from \"react\";\n//this usehistory hook creates a history object \nimport { useHistory } from \"react-router-dom\";\nimport classes from \"./AuthForm.module.css\";\nimport AuthContext from \"../auth-context\";\nconst AuthForm = () => {\n  const history=useHistory()\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const authCtx=useContext(AuthContext)\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading,setIsLoading]=useState(false)\n\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n  const submitHandler = (event) => {\n    event.preventDefault();\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n    //validation\n    setIsLoading(true)\n    let url;\n    if (isLogin) {\n      url='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCh16XEVl-F0hbqJ1L5BG61uXEAxqpSYyU'\n    } else {\n      url=\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCh16XEVl-F0hbqJ1L5BG61uXEAxqpSYyU\"\n     }\n     fetch(\n        url,\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: { \"Content-Type\": \"application/json\" },\n      \n    })\n    .then((res)=>{\n      setIsLoading(false)\n      if(res.ok){\n       return res.json()\n      }else{\n        return res.json().then((data)=>{\n          let errorMsg=' Authentication-Failed'\n          // if(data &&  data.error && data.error.message){\n          //   errorMsg=data.error.message\n          // }\n       \n          throw new Error(errorMsg)\n        })\n      }\n    }).then((data)=>{\n      //this timestamp is called from authCtx connected to firebase where the timestamp expires after an\n      //hour as default firebase expiration where it logs out after an hour \n      const expirationTimer=new Date(new Date().getTime()+(+data.expiresIn*1000))\n     authCtx.login(data.idToken,expirationTimer.toISOString())\n     history.replace('/')\n    }).catch((err)=>{\n      alert(err.message)\n    })\n\n  }\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\n      <form onSubmit={submitHandler}>\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input type=\"email\" id=\"email\" required ref={emailInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        <div className={classes.actions}>\n         { !isLoading && <button>{isLogin ? \"Login\" : \"Create Account\"}</button>}\n         {isLoading && <p>Sending request...</p>}\n          <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? \"Create new account\" : \"Login with existing account\"}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm\n","import AuthForm from '../Components/Auth/AuthForm'\nconst AuthPage = () => {\n  return <AuthForm />;\n};\n\nexport default AuthPage;\n"],"sourceRoot":""}